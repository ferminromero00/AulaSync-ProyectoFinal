security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_alumno_provider:
            entity:
                class: App\Entity\Alumno
                property: email
        app_profesor_provider:
            entity:
                class: App\Entity\Profesor
                property: email
        # Proveedor por defecto que combina ambos
        app_chain_provider:
            chain:
                providers: ['app_profesor_provider', 'app_alumno_provider']
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_alumno:
            pattern: ^/api/alumno
            stateless: true
            provider: app_alumno_provider
            json_login:
                check_path: api_login_alumno
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        api_profesor:
            pattern: ^/api/profesor
            stateless: true
            provider: app_profesor_provider
            json_login:
                check_path: api_login_profesor
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        api_clases:
            pattern: ^/api/clases
            stateless: true
            provider: app_profesor_provider
            jwt: ~
        main:
            lazy: true
            provider: app_chain_provider  # Cambiamos esto de app_user_provider a app_chain_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/alumno/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/profesor/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/alumno, roles: ROLE_ALUMNO }
        - { path: ^/api/profesor, roles: ROLE_PROFESOR }
        - { path: ^/api/clases, roles: ROLE_PROFESOR }
        - { path: ^/api/profesor/clases, roles: ROLE_PROFESOR }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
