name: Desplegar-Destruir

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Selecciona una acción: deploy o destroy"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
          - destroy

jobs:
  deploy:
    if: ${{ github.event.inputs.action == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml
          coverage: xdebug      

      - name: Instalar dependencias Composer
        working-directory: ./AulaSyncSymfony
        run: composer install --prefer-dist --no-progress

      - name: Ejecutar tests unitarios
        working-directory: ./AulaSyncSymfony
        run: php bin/phpunit --testdox

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializar y Planificar Terraform
        run: |
          cd terraform
          terraform init
          terraform plan

      - name: Aplicar Terraform
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Subir estado de Terraform a S3
        run: aws s3 cp terraform/terraform.tfstate s3://bucketfermin-2daw-202406/terraform.tfstate

      - name: Obtener IP pública de la instancia EC2
        id: get-ip
        run: |
          cd terraform
          echo "EC2_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Esperar a que la EC2 esté lista para SSH
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          for i in {1..15}; do
            echo "Intentando conectar por SSH (intento $i)..."
            ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@${{ env.EC2_IP }} 'echo EC2 lista' && break
            sleep 10
          done

      - name: Crear directorio del proyecto en EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} 'mkdir -p ~/AulaSync-ProyectoFinal'

      - name: Copiar todo el proyecto a la EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          # Copiar todo el proyecto
          scp -i private_key.pem -o StrictHostKeyChecking=no -r ./* ec2-user@${{ env.EC2_IP }}:~/AulaSync-ProyectoFinal/
          # Copiar archivos ocultos (.env, .gitignore, etc)
          scp -i private_key.pem -o StrictHostKeyChecking=no -r ./.* ec2-user@${{ env.EC2_IP }}:~/AulaSync-ProyectoFinal/ 2>/dev/null || true
          rm private_key.pem

      - name: Configurar permisos en EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} 'chmod -R 755 ~/AulaSync-ProyectoFinal'
          rm private_key.pem

  destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Descargar estado de Terraform desde S3
        run: aws s3 cp s3://bucketfermin-2daw-202406/terraform.tfstate terraform/terraform.tfstate

      - name: Inicializar y Destruir Terraform
        run: |
          cd terraform
          terraform init
          terraform destroy -auto-approve